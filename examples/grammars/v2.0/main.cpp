#include "../../../include/ilc.hpp"
#include <iostream>

enum SYMBOL { VAL, ID, NUM, PLUS, MINUS, MULT, DIV, EQU };

BEGIN_ILC_CODEGEN

/* clang-format off */

BEGIN_PRODUCTION(PREFIX_VAL)
BEGIN_CHAIN_DECLARATION VAL END_CHAIN_DECLARATION 
  REQUIRE_NON_TERMINAL(0)
END_PRODUCTION

BEGIN_PRODUCTION(P000_VAL)
BEGIN_CHAIN_DECLARATION PLUS, VAL END_CHAIN_DECLARATION 
  REQUIRE_TERMINAL(0)
  REQUIRE_NON_TERMINAL(1)
END_PRODUCTION

BEGIN_PRODUCTION(P001_VAL)
BEGIN_CHAIN_DECLARATION MINUS, VAL END_CHAIN_DECLARATION 
  REQUIRE_TERMINAL(0)
  REQUIRE_NON_TERMINAL(1)
END_PRODUCTION

BEGIN_PRODUCTION(P002_VAL)
BEGIN_CHAIN_DECLARATION MULT, VAL END_CHAIN_DECLARATION 
  REQUIRE_TERMINAL(0)
  REQUIRE_NON_TERMINAL(1)
END_PRODUCTION

BEGIN_PRODUCTION(P003_VAL)
BEGIN_CHAIN_DECLARATION DIV, VAL END_CHAIN_DECLARATION 
  REQUIRE_TERMINAL(0)
  REQUIRE_NON_TERMINAL(1)
END_PRODUCTION

BEGIN_PRODUCTION(P004_VAL)
BEGIN_CHAIN_DECLARATION NUM END_CHAIN_DECLARATION 
  REQUIRE_TERMINAL(0)
END_PRODUCTION

BEGIN_PRODUCTION(P000_ASGN)
BEGIN_CHAIN_DECLARATION ID, EQU, VAL END_CHAIN_DECLARATION 
  REQUIRE_TERMINAL(0)
  REQUIRE_TERMINAL(1)
  REQUIRE_NON_TERMINAL(2)
END_PRODUCTION

BEGIN_BINDINGS
  BEGIN_SYMBOL_BINDING(VAL)
    (PREFIX_VAL() and ( P000_VAL() or P001_VAL() or P002_VAL() or P003_VAL() or true)) or 
    P004_VAL()
  END_SYMBOL_BINDING
END_BINDINGS

/* clang-format on */
END_ILC_CODEGEN

        using namespace ILC;

bool _parse() {
  offset = 0;
  while ((P000_ASGN()) && not(offset >= chain_size))
    ;
  std::cout << "stoped at: " << offset << std::endl;
  return offset == chain_size;
}

/// use jumps and labels

int main() {
  chain = {

      ID,    EQU,   NUM,   PLUS,  NUM,   PLUS,  NUM,   PLUS,  NUM    };
  chain_size = chain.size();
  bool is_valid = _parse();
  std::cout << (is_valid ? "is valid" : "is not valid") << std::endl;
}
